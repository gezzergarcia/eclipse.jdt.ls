<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.eclipse.jdt.ls</groupId>
		<artifactId>parent</artifactId>
		<version>1.42.0-SNAPSHOT</version>
	</parent>
	<artifactId>org.eclipse.jdt.ls.core</artifactId>
	<packaging>eclipse-plugin</packaging>
	<name>${base.name} :: Core</name>
	<build>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<configuration>
					<artifactItems>
						<artifactItem>
							<groupId>com.kotcrab.remark</groupId>
							<artifactId>remark</artifactId>
							<version>1.2.0</version>
						</artifactItem>
						<artifactItem>
							<groupId>org.jsoup</groupId>
							<artifactId>jsoup</artifactId>
							<version>1.14.2</version>
						</artifactItem>
						<artifactItem>
							<groupId>com.jetbrains.intellij.java</groupId>
							<artifactId>java-decompiler-engine</artifactId>
							<version>231.9011.34</version>
						</artifactItem>
					</artifactItems>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.codehaus.gmaven</groupId>
				<artifactId>groovy-maven-plugin</artifactId>
				<version>2.1.1</version>
				<executions>
					<execution>
						<?m2e ignore?>
						<phase>generate-resources</phase>
						<goals>
							<goal>execute</goal>
						</goals>
						<configuration>
							<source>


								import groovy.json.JsonSlurper
								import groovy.json.JsonOutput

								import java.net.http.HttpClient
								import java.net.http.HttpRequest
								import java.net.http.HttpResponse.BodyHandlers
								import java.util.concurrent.CompletableFuture
								import java.util.stream.Collectors;

								import java.util.concurrent.Executors
								import java.util.concurrent.ExecutorService
								import java.time.Duration


								def checksumsFile = new File(project.basedir.absolutePath, "gradle/checksums/checksums.json")
								if (System.getProperty("eclipse.jdt.ls.skipGradleChecksums") != null &amp;&amp; checksumsFile.exists()) {
								println "Skipping gradle wrapper validation checksums ..."
								return
								}

								def versionUrl = new URL("https://services.gradle.org/versions/all")
								def versionStr = versionUrl.text;
								def versionsFile = new File(project.basedir.absolutePath, "gradle/checksums/versions.json")
								versionsFile.parentFile.mkdirs() //just in case
								versionsFile.write(versionStr)
								println "Wrote to ${versionsFile}"


								def data = ["8.12-20241121002803+0000", "8.11.1", "8.11.1-20241119012204+0000", "8.11", "8.11-rc-3", "8.11-rc-2", "8.11-rc-1", "8.11-milestone-1", "8.10.2", "8.10.2-milestone-1", "8.10.1", "8.10", "8.10-rc-1", "8.9", "8.9-rc-2", "8.9-rc-1", "8.8", "8.8-rc-2", "8.8-rc-1", "8.7", "8.7-rc-4", "8.7-rc-3", "8.7-rc-2", "8.7-rc-1", "7.6.4", "8.6", "8.6-rc-4", "8.6-rc-3", "8.6-rc-2", "8.6-rc-1", "8.6-milestone-1", "8.5", "8.5-rc-4", "8.5-rc-3", "8.5-rc-2", "8.5-rc-1", "8.4", "7.6.3", "8.4-rc-3", "8.4-rc-2", "8.4-rc-1", "8.3", "8.3-rc-4", "8.3-rc-3", "8.3-rc-2", "8.3-rc-1", "8.2.1", "8.2", "7.6.2", "8.2-rc-3", "8.2-rc-2", "8.2-rc-1", "8.2-milestone-1", "8.1.1", "8.1", "8.1-rc-4", "8.1-rc-3", "8.1-rc-2", "8.1-rc-1", "8.0.2", "7.6.1", "6.9.4", "8.0.1", "8.0", "8.0-rc-5", "8.0-rc-4", "8.0-rc-3", "8.0-rc-2", "8.0-rc-1", "8.0-milestone-6", "8.0-milestone-5", "8.0-milestone-4", "7.6", "7.6-rc-4", "7.6-rc-3", "7.6-rc-2", "8.0-milestone-3", "7.6-rc-1", "6.9.3", "8.0-milestone-2", "8.0-milestone-1", "7.6-milestone-1", "7.5.1", "7.5", "7.5-rc-5", "7.5-rc-4", "7.5-rc-3", "7.5-rc-2", "7.5-rc-1", "7.4.2", "7.4.1", "7.4", "7.4-rc-2", "7.4-rc-1", "7.3.3", "7.3.3-rc-1", "6.9.2", "7.3.2", "7.3.1", "7.3", "7.3-rc-5", "7.3-rc-4", "7.3-rc-3", "7.3-rc-2", "7.3-rc-1", "6.9.1", "7.2", "7.2-rc-3", "7.2-rc-2", "7.2-rc-1", "7.1.1", "7.1", "7.1-rc-2", "7.1-rc-1", "7.0.2", "7.0.1", "6.9", "6.9-rc-2", "6.9-rc-1", "7.0", "7.0-rc-2", "7.0-rc-1", "7.0-milestone-3", "7.0-milestone-2", "6.8.3", "6.8.2", "7.0-milestone-1", "6.8.1", "6.8", "6.8-rc-5", "6.8-rc-4", "6.8-rc-3", "6.8-rc-1", "6.7.1", "6.8-milestone-3", "6.8-milestone-2", "6.7", "6.8-milestone-1", "6.7-rc-5", "6.7-rc-4", "6.7-rc-3", "6.7-rc-2", "6.7-rc-1", "6.6.1", "6.6", "6.6-rc-6", "6.6-rc-5", "6.6-rc-4", "6.6-rc-3", "6.6-rc-2", "6.6-rc-1", "6.6-milestone-3", "6.5.1", "6.6-milestone-2", "6.6-milestone-1", "6.5", "6.5-rc-1", "6.4.1", "6.5-milestone-2", "6.5-milestone-1", "6.4", "6.4-rc-4", "6.4-rc-3", "6.4-rc-2", "6.4-rc-1", "6.3", "6.3-rc-4", "6.3-rc-3", "6.3-rc-2", "6.3-rc-1", "6.2.2", "6.2.1", "6.2", "6.2-rc-3", "6.2-rc-2", "6.2-rc-1", "6.1.1", "6.1", "6.1-rc-3", "6.1-rc-2", "6.1-rc-1", "6.1-milestone-3", "6.1-milestone-2", "6.1-milestone-1", "6.0.1", "6.0", "6.0-rc-3", "5.6.4", "6.0-rc-2", "6.0-rc-1", "5.6.3", "5.6.2", "5.6.1", "5.6", "5.6-rc-2", "5.6-rc-1", "5.5.1", "5.5", "5.5-rc-4", "5.5-rc-3", "5.5-rc-2", "5.5-rc-1", "5.4.1", "5.4", "5.4-rc-1", "5.3.1", "5.3", "5.3-rc-3", "5.3-rc-2", "5.3-rc-1", "5.2.1", "5.2", "5.2-rc-1", "5.1.1", "5.1", "5.1-rc-3", "5.1-rc-2", "5.1-rc-1", "4.10.3", "5.1-milestone-1", "5.0", "4.10.2", "4.10.1", "4.10", "4.9", "4.8.1", "4.8", "4.7", "4.6", "4.5.1", "4.5", "4.4.1", "4.4", "4.3.1", "4.3", "4.2.1", "4.2", "4.1", "3.2.1", "3.2", "3.1", "3.0", "2.14.1", "2.14", "2.13", "2.12", "2.11", "2.10", "2.9", "2.8", "2.7", "2.6", "2.5", "2.4", "2.3", "2.2.1", "2.2", "2.1", "2.0", "1.12", "1.11", "1.10", "1.9", "1.8", "1.7", "1.6", "1.5", "1.4", "1.3", "1.2", "1.1", "1.0"]

								def versions = new JsonSlurper().parseText(versionStr)
								class Checksum {
								String wrapperChecksumUrl;
								String sha256
								}
								ExecutorService executor = Executors.newFixedThreadPool(10) // MÃ¡ximo 10 hilos concurrentes
								// HttpClient client = HttpClient.newHttpClient()
								HttpClient client = HttpClient.newBuilder().executor(executor).build()
								def futures = []

								println "Numero de versiones: ${versions.size()}"

								int ver = 1
								versions.each {

								    if (data.contains(it)){

								if (it.wrapperChecksumUrl == null) {
								    return
								}

								println "${it.version}"
								ver = ver + 1
								HttpRequest request = HttpRequest.newBuilder().uri(URI.create(it.wrapperChecksumUrl)).build()
								futures.add(client.sendAsync(request, BodyHandlers.ofString()).thenApply { response ->
								    if (response.statusCode() == 301) {
								    String newUrl = response.headers().firstValue("location").orElse(null)
								    if (newUrl != null) {
								        HttpRequest newRequest = HttpRequest.newBuilder()
								            .uri(URI.create(newUrl))
								            .build()
								        try {
								        String sha256 = client.send(newRequest, BodyHandlers.ofString()).body()
								        return new Checksum(wrapperChecksumUrl: it.wrapperChecksumUrl, sha256: sha256)
								        } catch (IOException | InterruptedException e) {
								        return null
								        }
								    } else {
								        return null
								    }
								    } else {
								    // Return the body of the original response
								    return new Checksum(wrapperChecksumUrl: it.wrapperChecksumUrl, sha256: response.body())
								    }
								})

								    }

								}
								println "executor.shutdown"
								executor.shutdown()

								def checksums = CompletableFuture.allOf(futures.toArray(new CompletableFuture[0]))
								    .thenApply { v ->
								    futures.stream().map({ f ->
								        f.join()
								    }).collect(Collectors.toList())
								    }.get()

								def json = JsonOutput.toJson(checksums)
								checksumsFile.write(JsonOutput.prettyPrint(json))
								println "Wrote to ${checksumsFile}"

								
							</source>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>
	<repositories>
		<repository>
			<id>jetbrains-intellij</id>
			<url>https://www.jetbrains.com/intellij-repository/releases/</url>
		</repository>
	</repositories>
</project>
